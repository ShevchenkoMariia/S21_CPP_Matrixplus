#include <gtest/gtest.h>
#include "s21_matrix_oop.h"

using namespace std;

/*
 * ./test --gtest_output=«xml:out.xml» — помимо выдачи в std::out будет создан out.xml — XML отчет с результатами выполнения тестовой программы
 * RUN_ALL_TESTS() делает вашу тестовую программу просто исполняемым файлом
 * Чтобы задать собственное сообщение об ошибке, просто передайте его в макрос с помощью оператора <<
 * пример: ASSERT_EQ(x.size(), y.size()) << "Vectors x and y are of unequal length";
 *
 * */

/*
 EXPECT_ - позволяет не останавливать тестирование после ошибки
 ______________________________
 ASSERT_TRUE(condition);
 ASSERT_FALSE(condition);
 ______________________________
 ASSERT_EQ(expected, actual); — =
 ASSERT_NE(val1, val2); — !=
 ASSERT_LT(val1, val2); — <
 ASSERT_LE(val1, val2); — <=
 ASSERT_GT(val1, val2); — >
 ASSERT_GE(val1, val2); — >=
 ______________________________
 Проверка на исключения
 ASSERT_THROW(statement, exception_type);
 ASSERT_ANY_THROW(statement);
 ASSERT_NO_THROW(statement);
 ______________________________
 Сравнение чисел с плавающей точкой
 ASSERT_FLOAT_EQ(expected, actual); — неточное сравнение float
 ASSERT_DOUBLE_EQ(expected, actual); — неточное сравнение double
 ASSERT_NEAR(val1, val2, abs_error); — разница между val1 и val2 не превышает погрешность abs_error
 ______________________________
 */

/*
 TEST принимает 2 параметра, уникально идентифицирующие тест, — название тестового набора и название теста.
 ______________________________
 TEST_F  Фиксации (fixtures)
 Случается, что объекты, участвующие в тестировании, сложно настраиваются для каждого теста. Можно задать процесс настройки один раз и исполнять его для каждого теста автоматически. В таких ситуациях используются фиксации.
 
 Фиксация представляет собой класс, унаследованный от ::testing::Test, внутри которого объявлены все необходимые для тестирования объекты при этом в конструкторе либо функции SetUp() выполняется их настройка, а в функции TearDown() освобождение ресурсов. Сами тесты, в которых используются фиксации, должны быть объявлены с помощью макроса TEST_F, в качестве первого параметра которого должно быть указано не название набора тестов, а название фиксации.
 
 Для каждого теста будет создана новая фиксация, настроена с помощью SetUp(), запущен тест, освобождены ресурсы с помощью TearDown() и удален объект фиксации. Таким образом каждый тест будет иметь свою копию фиксации «не испорченную» предыдущим тестом.
*/

/*
TEST(TestGroupName, Subtest_1) {
  ASSERT_TRUE(1 == 1);
}

TEST(TestGroupName, Subtest_2) {
  ASSERT_FALSE('b' == 'b');
  cout << "continue test after failure" << endl;
}
*/

TEST (S21_Transpose, test_1) {
	
}

int main()
{
	
       	return RUN_ALL_TESTS();
}
